@page "/character/{Id}"
@attribute [Authorize]

@using Npc
@using Npc.Attributes
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICharacterBuildService BuildService

<div class="container">
    <div class="row">
        <h2>@Model?.Build?.Name</h2>
    </div>
    <div class="row">
        @if (Prompt != null)
        {
            <div class="col col-md-6">
                <p><strong>@Prompt.Prompt</strong></p>
                <ul class="list-group">
                    @foreach (var choice in Prompt.Choices)
                    {
                        <ChoiceView Choice=@choice OnChosen=@OnChosen />
                    }
                </ul>
            </div>
            <div class="col col-md-6">
                <CharacterSheetView Sheet=@Sheet />
            </div>
        }
        else
        {
            <CharacterSheetView Sheet=@Sheet />
        }
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    public CharacterBuildModel Model { get; set; }

    private PromptModel Prompt => Model?.BuildOutput != null && PromptModel.CanCreate(Model.BuildOutput) ? PromptModel.Create(Model.BuildOutput) : null;

    private IEnumerable<CharacterSubHeading> Sheet => Model?.BuildOutput != null ? CharacterSheet.create(Model.BuildOutput.Character) : Enumerable.Empty<CharacterSubHeading>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Model = await BuildService.GetAsync(authState.User, Id);
    }

    private async Task OnChosen(string choice)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Model = await BuildService.BuildAsync(authState.User, Model, choice);
    }
}