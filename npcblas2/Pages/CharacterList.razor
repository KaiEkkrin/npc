@page "/characterlist"
@attribute [Authorize]

@using Npc
@using Npc.Attributes
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICharacterBuildService BuildService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="col col-lg-4">
            <h2>New character</h2>

            <EditForm Model=@NewCharacterModel OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="name">Name</label>
                    <input @bind-value=@NewCharacterModel.Name class="form-control" id="name">
                    <label for="level">Level</label>
                    <input @bind-value=@NewCharacterModel.Level class="form-control" id="level">
                </div>
                <input class="btn btn-primary" type="submit" value="Create"/>
            </EditForm>
        </div>
        <div class="col col-lg-8">
            <h2>My characters</h2>

            <table class="table table-condensed table-hover table-striped">
                <thead>
                    <tr>
                        <SortableColumnHeading PropertyName=@NameColumn
                                               DefaultOrder=@Order.Ascending
                                               CurrentOrder=@GetColumnOrder(NameColumn)
                                               OnChanged=@OnSortOrderChanged>Name</SortableColumnHeading>
                        <SortableColumnHeading PropertyName=@LevelColumn
                                               DefaultOrder=@Order.Ascending
                                               CurrentOrder=@GetColumnOrder(LevelColumn)
                                               OnChanged=@OnSortOrderChanged>Level</SortableColumnHeading>
                        <th scope="col">Summary</th>
                        <SortableColumnHeading PropertyName=@CreationDateColumn
                                               DefaultOrder=@Order.Descending
                                               CurrentOrder=@GetColumnOrder(CreationDateColumn)
                                               OnChanged=@OnSortOrderChanged>Created on</SortableColumnHeading>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (Characters != null)
                    {
                        @foreach (var c in Characters)
                        {
                            <CharacterSummaryRow Build=@c OnRemove=@OnRemove />
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private const string NameColumn = "name";
    private const string LevelColumn = "level";
    private const string CreationDateColumn = "creationDate";

    private List<CharacterBuild> Characters { get; set; }
    private NewCharacterModel NewCharacterModel = new NewCharacterModel();

    private string SortProperty { get; set; } = CreationDateColumn;

    private Order SortOrder { get; set; } = Order.Descending;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Characters = await BuildService.GetAllAsync(authState.User);
        Characters.Sort(Compare);
    }

    private Order? GetColumnOrder(string name) => name == SortProperty ? (Order?)SortOrder : null;

    private void OnSortOrderChanged((string name, Order order) x)
    {
        (SortProperty, SortOrder) = x;
        Characters.Sort(Compare);
    }

    private int CompareByProperty(CharacterBuild a, CharacterBuild b) => SortProperty switch
    {
        NameColumn => a.Name.CompareTo(b.Name),
        LevelColumn => a.Level.CompareTo(b.Level),
        _ => a.CreationDateTime.CompareTo(b.CreationDateTime)
    };

    private int Compare(CharacterBuild a, CharacterBuild b)
    {
        var comparison = CompareByProperty(a, b);
        return SortOrder == Order.Descending ? -comparison : comparison;
    }

    private async Task OnValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var model = await BuildService.AddAsync(authState.User, NewCharacterModel);
        if (model != null)
        {
            var stringId = $"{model.Build.Id}";
            NavigationManager.NavigateTo($"character/{WebUtility.UrlEncode(stringId)}");
        }
    }

    private async Task OnRemove(CharacterBuild build)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (await BuildService.RemoveAsync(authState.User, build))
        {
            Characters.Remove(build);
        }
    }
}