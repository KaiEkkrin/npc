@page "/characterlist"
@attribute [Authorize]

@using Npc
@using Npc.Attributes
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICharacterBuildService BuildService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="col col-md-6">
            <h2>New character</h2>

            <EditForm Model=@NewCharacterModel OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="name">Name</label>
                    <input @bind-value=@NewCharacterModel.Name class="form-control" id="name">
                    <label for="level">Level</label>
                    <input @bind-value=@NewCharacterModel.Level class="form-control" id="level">
                </div>
                <input class="btn btn-primary" type="submit" value="Create"/>
            </EditForm>
        </div>
        <div class="col col-md-6">
            <h2>My characters</h2>

            <table class="table table-condensed table-hover table-striped">
                <thead>
                    <tr>
                        <!-- These headings should match the rows in CharacterSummaryRow.razor -->
                        <th scope="col">Name</th>
                        <th scope="col">Level</th>
                        <th scope="col">Created on</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var c in Characters ?? Enumerable.Empty<CharacterBuild>())
                    {
                        <CharacterSummaryRow Build=@c />
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private IEnumerable<CharacterBuild> Characters { get; set; }
    private NewCharacterModel NewCharacterModel = new NewCharacterModel();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Characters = await BuildService.GetAllAsync(authState.User);
    }

    private string GetLink(CharacterBuild build) => $"/character/{build.Id}";

    private async Task OnValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var model = await BuildService.AddAsync(authState.User, NewCharacterModel);
        if (model != null)
        {
            var stringId = $"{model.Build.Id}";
            NavigationManager.NavigateTo($"character/{WebUtility.UrlEncode(stringId)}");
        }
    }
}