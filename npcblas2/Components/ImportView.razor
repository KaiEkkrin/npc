@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICharacterBuildService CharacterBuildService
@inject IFileStorageService FileStorageService

<table class="table table-condensed table-striped">
    <tbody>
        @foreach (var f in Files)
        {
            <ImportableFileRow File=@f OnImport=@OnImport />
        }
    </tbody>
</table>

@if (Result != null)
{
    <p>Import completed with @Result.NumberAdded characters added, @Result.NumberUpdated characters updated, @Result.NumberRejected records rejected.</p>
}

@code {
    [Parameter]
    public List<StoredFile> Files { get; set; }

    private ImportResult Result { get; set; }

    private async Task OnImport(StoredFile file)
    {
        Result = null;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Result = await CharacterBuildService.ImportFromFileAsync(authState.User, FileStorageService, file);
    }
}