@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICharacterBuildService BuildService
@inject IModalService ModalService

@if (Build != null)
{
    <tr>
        <td>
            <div style="display: block">
                @if (Build.Build.IsPublic == true)
                {
                    <a href=@Link title="Public link">
                        <span class="fa fa-link"></span>
                    </a>
                }
                <a href=@Link>@Build.Build.Name</a>
            </div>
        </td>
        <td>@Build.Build.Level</td>
        <td>@Build.Build.Summary</td>
        <td>@Build.Build.CreationDateTime.ToShortDateString()</td>
        @if (ShowPublic)
        {
            <td>@Build.Handle</td>
        }
        else
        {
            <td>
                <div class="btn-group" role="group" aria-label="Actions">
                    @if (Build.Build.IsPublic == true)
                    {
                        <a class="btn btn-primary" href="#" title="Make private" @onclick="OnMakePrivateClick" @onclick:preventDefault>
                            <span class="fa fa-minus-circle"></span>
                        </a>
                    }
                    else
                    {
                        <a class="btn btn-primary" href="#" title="Make public" @onclick="OnMakePublicClick" @onclick:preventDefault>
                            <span class="fa fa-share"></span>
                        </a>
                    }
                    <a class="btn btn-danger" href="#" title="Remove" @onclick="OnRemoveClick" @onclick:preventDefault>
                        <span class="fa fa-times"></span>
                    </a>
                </div>
            </td>
        }
    </tr>
}

@code {
    [Parameter]
    public bool ShowPublic { get; set; }

    [Parameter]
    public CharacterBuildSummary Build { get; set; }

    [Parameter]
    public EventCallback<CharacterBuildSummary> OnRemove { get; set; }

    public string Link => $"/character/{Build?.Build.Id}";

    public Task OnMakePublicClick() => SetPublic(true);

    public Task OnMakePrivateClick() => SetPublic(false);

    private async Task SetPublic(bool isPublic)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (Build?.Build?.Id == null)
        {
            return;
        }

        await BuildService.SetPublicAsync(authState.User, Build.Build.Id, isPublic);
    }

    public async Task OnRemoveClick()
    {
        var build = Build;
        if (build == null)
        {
            return;
        }

        var parameters = new ModalParameters();
        parameters.Add(nameof(RemoveConfirmation.Build), build);
        var confirmModal = ModalService.Show<RemoveConfirmation>($"Remove {build.Build.Name}", parameters);
        var result = await confirmModal.Result;
        if (!result.Cancelled && result.Data is CharacterBuildSummary toRemove)
        {
            await OnRemove.InvokeAsync(toRemove);
        }
    }
}